from tik_functions import *

m = 10

# matrix = GenMatrix_10()

"""
matrix = [
    [0.005,   0.0025,  0.07,    0.001,   0.001,   0.001,   0.001,   0.01,    0.001,   0.01],
    [0.02,    0.02,    0.005,   0.005,   0.003,   0.03,    0.01,    0.0005,  0.005,   0.005],
    [0.001,   0.015,   0.0005,  0.0015,  0.001,   0.02,    0.01,    0.005,   0.025,   0.005],
    [0.015,   0.045,   0.03,    0.001,   0.01,    0.005,   0.002,   0.005,   0.01,    0.001],
    [0.001,   0.01,    0.002,   0.001,   0.01,    0.001,   0.005,   0.005,   0.001,   0.05],
    [0.005,   0.0025,  0.07,    0.001,   0.001,   0.001,   0.001,   0.01,    0.001,   0.01],
    [0.02,    0.02,    0.005,   0.005,   0.003,   0.03,    0.01,    0.0005,  0.005,   0.005],
    [0.001,   0.015,   0.0005,  0.0015,  0.001,   0.02,    0.01,    0.005,   0.025,   0.005],
    [0.015,   0.045,   0.03,    0.001,   0.01,    0.005,   0.002,   0.005,   0.01,    0.001],
    [0.001,   0.01,    0.002,   0.001,   0.01,    0.001,   0.005,   0.005,   0.001,   0.05]
]
"""

matrix = np.array(\
      [[0.97, 0.02, 0.01, 0., 0., 0., 0., 0., 0., 0.],
       [0.02, 0.95, 0.02, 0.01, 0., 0., 0., 0., 0., 0.],
       [0., 0.01, 0.98, 0.01, 0., 0., 0., 0., 0., 0.],
       [0., 0.01, 0.02, 0.94, 0.02, 0.01, 0., 0., 0., 0.],
       [0., 0., 0., 0.01, 0.98, 0.01, 0., 0., 0., 0.],
       [0., 0., 0., 0.01, 0.01, 0.96, 0.01, 0.01, 0., 0.],
       [0., 0., 0., 0., 0.01, 0.02, 0.94, 0.02, 0.01, 0.],
       [0., 0., 0., 0., 0., 0., 0.02, 0.96, 0.02, 0.],
       [0., 0., 0., 0., 0., 0., 0., 0.01, 0.98, 0.01],
       [0., 0., 0., 0., 0., 0., 0., 0.01, 0.01, 0.98]])

matrix = np.array(matrix)

def entropy(probs):
    return -np.sum(probs*np.log2(probs))

ShowMatrix(matrix, m)

# A = np.array([0.17, 0.03, 0.29, 0.05, 0.09, 0.08,\
            #   0.14, 0.05, 0.07, 0.03]).reshape((1, -1))

p = 0.9
q = 1 - p

A = [p*(q)**(x) for x in range(m)]
A = np.array(A)

H_A = entropy(A)

print("P(A) = ", A)
# print("Summary P(A) = ", sum(A))
print("H(A) = %.3f" % H_A)
print()

AB = matrix * A.transpose()
B = np.sum(AB, axis=0)
H_B = entropy(B)

print("P(B) = ",     B)
# print("Summary P(B) = ", sum(B))
print("H(B) = %.3f" % H_B)
print()

def conditional_entropy(p, s):
    return -np.sum(p*np.log2(s+1e-20))

B_A = conditional_entropy(AB, matrix)
print("H(B/A) = %.3f" % B_A)

A_B = AB / B
A_B = conditional_entropy(A_B, matrix)
print("H(A/B) = %.3f" % A_B)


V = 26
n = 16

k0 = 1 / (0.05 * V * 0.001)
print("За одиницю часу передається %.3f символів" % (k0))

C = k0 * (H_B - B_A)
print("Швидкість передачі інформації - %.3f bit/s" % (C))

C_n = k0 * (np.log2(n) - B_A)
print("C : Пропускна спроможність каналу зв'язку - %.3f bit/s" % (C_n))

k = 100 * V

delta_I = k*B_A
I = k*(H_B - B_A)
print("I(A,B) : При передачі %d символів втрачається %.3f біт, а приймається в середньому %.3f біт інформації" % (k,delta_I,I))




