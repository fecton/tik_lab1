Арифметичне кодування та кодування за Хаффманом
Завдяки дуже широкому використанню кодування Хаффмана можна казати, що відповідний алгоритм належить до найбіль успішних методів кодування в іторії IT. Однак, як ми уже знаємо, він також має певні недоліки. Завдяки цьому останнім часом зростає конкуренція до нього з боку альтернативного підходу, який зазвичай називають «арифметичним» кодуванням (рис.7.1).
Основна ідея арифметичного кодування полягає в тому, що певні ланцюжки знаків кодуються довгими числами (зокрема в двійковими представленні). Процедура кодування передбачає визначення необхідного числа за певним алгоритмом, який враховує імовірності використвуваних знаків. Напроти, декодування відновлює послідовність знаків в ланцюжку, спираючись на зворотню процедуру.
Основною перевагою арифметичного кодування є його більш висока щільність порівняно із кодуванням по Хаффману. Дійсно, збитковість кодування за Хаффмену обмежена розподілом імовірностей знаків і метод укрупнення алфавіту, який дозволяє подолати таке обмеження, дає занадто громізкі для практики рішення. Для арифметичного кодування поєднання знаків в групи (ланцюжки) забезпечується лише додатковими розрахунками. При достатній довжині груп питома довжина коду прагне до ентропії.
Поширення арифметичного кодування стає особливо замітним останнім часом, оскільки його основний недолік — значні витрати ресурсів процесора на розрахунки — стає все менш критичним. Отже, в сучасних програмах архіваторах та спеціалізованих методах стискання повідомлень арифметичне кодування поступово витісняє кодування за Хаффманом.
Процедура арифметичного кодування повідомлень   
Розглянемо процедуру арифметичного кодування на прикладі. Нехай відомо, що в повідомленнях Джерела використовуються знаки чотирьох типів з імовірностями відповідно Z1 - 0.6; Z2 - 0.2; Z3 - 0.1; Z4 - 0.1. Знайдемо двійкове число, яке однозначно визначає послідовність знаків Z1, Z3, Z2, Z1. Процедуру ілюструє рис. 7.2.
Спочатку відрізок довжиною 1,0 (яка відповідає сумарній імовірності появи знаків)